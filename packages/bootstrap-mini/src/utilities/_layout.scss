@use "sass:list";

// =========================================
// --> Bring only the require for a layout
$sparkUtil: (
    "border-style": (
        property: border-style,
        class: "-",
        values: (
            dashed: dashed,
            dotted: dotted,
            none: none,
            solid: solid,
        ),
    ),
);

$sparkOptionalUtils: (
    margin:
        mapMerge(
            map-get-multiple(
                $utilities,
                ("margin", "margin-bottom", "margin-top", "margin-x", "margin-y")
            ),
            (
                "margin-right": (
                    responsive: true,
                    property: margin-right,
                    class: mr,
                    values:
                        map-merge(
                            $spacers,
                            (
                                auto: auto,
                            )
                        ),
                ),
                "margin-left": (
                    responsive: true,
                    property: margin-left,
                    class: ml,
                    values:
                        map-merge(
                            $spacers,
                            (
                                auto: auto,
                            )
                        ),
                ),
            )
        ),
    padding:
        mapMerge(
            map-get-multiple(
                $utilities,
                ("padding", "padding-bottom", "padding-top", "padding-x", "padding-y")
            ),
            (
                "padding-right": (
                    responsive: true,
                    property: padding-right,
                    class: pr,
                    values: $spacers,
                ),
                "padding-left": (
                    responsive: true,
                    property: padding-left,
                    class: pl,
                    values: $spacers,
                ),
            )
        ),
    width: (
        "width-percent": (
            responsive: true,
            property: width,
            class: w,
            values: $percentSizes,
        ),
    ),
    height: (
        "height-percent": (
            responsive: true,
            property: height,
            class: h,
            values:
                map-merge(
                    $percentSizes,
                    (
                        vh: 100vh,
                    )
                ),
        ),
    ),
    z-index: (
        "z-index": (
            property: z-index,
            class: z,
            values: $zIndex,
        ),
    ),
    flex:
        map-get-multiple(
            $utilities,
            (
                "align-content",
                "align-items",
                "align-self",
                "flex",
                "flex-direction",
                "flex-grow",
                "flex-shrink",
                "flex-wrap",
                "justify-content",
                "order"
            )
        ),
    float: (
        "float": (
            responsive: true,
            property: float,
            values: (
                left: left,
                right: right,
                none: none,
            ),
        ),
    ),
    display: map-get-multiple($utilities, ("display")),
    visibility: map-get-multiple($utilities, ("visibility")),
);

// -----------------------------------------
// Remap to correct or override the utilities
@each $key, $value in $miniUtilsMapping {
    @if $value {
        $sparkUtil: map-merge($sparkUtil, map-get($sparkOptionalUtils, $key));
    }
}

// -----------------------------------------
// Start building the classes
$targetBreakpoints: map-get-multiple($sparkBreakpoints, $screenSizes);
$responsiveClasses: ();

// produce the standard utility classes
@each $key, $value in $sparkUtil {
    @include generate-utility($value);

    @if (type-of($value) == "map") {
        @if (map-get($value, responsive)) {
            $responsiveClasses: append($responsiveClasses, $value);
        }
    }
}

// produce the responsive utility classes
@if length($responsiveClasses) > 0 {
    @each $breakpoint in map-keys($targetBreakpoints) {
        $suffix: -#{$breakpoint};
        @include breakpoint($breakpoint) {
            @each $value in $responsiveClasses {
                @include generate-utility($value, $suffix);
            }
        }
    }
}

.container,
.container-fluid,
.container-full {
    --bs-gutter-x: 1.5rem;
    --bs-gutter-y: 0;
    width: 100%;
    padding-right: calc(var(--bs-gutter-x) * 0.5);
    padding-left: calc(var(--bs-gutter-x) * 0.5);
    margin-right: auto;
    margin-left: auto;
    max-width: clamp(320px, 100%, 1400px);
}

:root {
    --bs-max-width: 100%;
    --bs-max-width-lg: 1024px;
    --bs-max-width-xl: 1200px;
    --bs-max-width-xxl: 1400px;
    --bs-container-pad-xs: 15px;
    --bs-container-pad-sm: 20px;
    --bs-container-pad-md: 30px;
    --bs-container-pad-lg: 40px;
    --bs-container-pad-xl: 40px;
    --bs-container-pad-xxl: 40px;
}
.container-fluid,
.container-full {
    max-width: 100%;
}

@media (min-width: 0) {
    :root {
        --x-container-max-width: var(--bs-max-width);
        --x-container-pad: var(--bs-container-pad-xs);
    }
}
@media (min-width: 576px) {
    :root {
        --x-container-max-width: var(--bs-max-width);
        --x-container-pad: var(--bs-container-pad-sm);
    }
}
@media (min-width: 768px) {
    :root {
        --x-container-max-width: var(--bs-max-width);
        --x-container-pad: var(--bs-container-pad-md);
    }
}
@media (min-width: 992px) {
    :root {
        --x-container-max-width: var(--bs-max-width-lg);
        --x-container-pad: var(--bs-container-pad-lg);
    }
}
@media (min-width: 1200px) {
    :root {
        --x-container-max-width: var(--bs-max-width-xl);
        --x-container-pad: var(--bs-container-pad-xl);
    }
}
@media (min-width: 1400px) {
    :root {
        --x-container-max-width: var(--bs-max-width-xxl);
        --x-container-pad: var(--bs-container-pad-xxl);
    }
}

.container {
    max-width: var(--x-container-max-width);
    padding: 0 var(--x-container-pad);
}
// =========================================
// --> Font Sizes
// --------------------------
:root {
    --x-base-font-size: 1;
    --x-base-line-height: 1.5;
    --x-font-size: 15px;
    --x-base-div-width: 1040;
    --x-input-height: 40px;
}
// TABLETS
@include breakpoint(tablet) {
    :root {
        --x-base-font-size: 0.85;
        --x-base-div-width: 740;
    }
}
// MOBILES UNDER 600PX;
@include breakpoint(mobile) {
    :root {
        --x-base-font-size: 0.75;
        --x-base-div-width: 360;
    }
}

hr,
.hr,
.ruler,
.divider {
    margin: 0;
    border-top: 1px dashed var(--x-hr-color, #333333);
    display: block;
    height: 1px;
    width: 100%;
    clear: both;
    &.--semi {
        width: 75%;
    }
    &.--mid,
    &.--half {
        width: 50%;
    }
    &.--small,
    &.--third {
        width: 30%;
    }
}

hr,
.hr {
    border: 0;
    background-color: var(--x-hr-color, #333333);
    margin: 20px 0;
}
