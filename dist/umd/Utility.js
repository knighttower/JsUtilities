/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("Utility", [], factory);
	else if(typeof exports === 'object')
		exports["Utility"] = factory();
	else
		root["Utility"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/DomObserver.js":
/*!****************************!*\
  !*** ./src/DomObserver.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// Author Knighttower\n// MIT License\n// [2022] [Knighttower] https://github.com/knighttower\n/**\n * @module DomObserver\n * Detect DOM changes\n * @name DomObserver\n * @param {window} selector\n * @param {Function}\n * @return DomObserver\n * @example DomObserver.addOnNodeChange('elementIdentifier', () => { console.log('Node changed') })\n * @example DomObserver.removeOnNodeChange('elementIdentifier')\n */\n/**\n * Holds memory of registered functions\n * @private\n */\nconst executeOnNodeChanged = {};\n/**\n * When node change\n * @param {String} id\n * @param {Function} callback Callback when any node changes/ add/deleted/modified\n * @return {Void}\n */\nconst addOnNodeChange = (id, callback) => {\n    if (callback) {\n        executeOnNodeChanged[id] = callback;\n    }\n};\n/**\n * Remove from node change\n * @param {String} id\n * @return {Void}\n */\nconst removeOnNodeChange = (id) => {\n    if (id) {\n        delete executeOnNodeChanged[id];\n    }\n};\n/**\n * Deep cleanup\n * @return {Void}\n */\nconst cleanup = () => {\n    Object.keys(executeOnNodeChanged).forEach((key) => delete executeOnNodeChanged[key]);\n};\n/**\n * Observer\n * @private\n * @return {MutationObserver}\n */\n(() => {\n    if (typeof window !== 'undefined') {\n        const callback = (mutationList, observer) => {\n            for (const mutation of mutationList) {\n                if (mutation.type === 'childList') {\n                    for (const id in executeOnNodeChanged) {\n                        executeOnNodeChanged[id]();\n                    }\n                }\n            }\n        };\n        const config = {\n            childList: true,\n            subtree: true,\n        };\n        const observer = new MutationObserver(callback);\n        observer.observe(document.body, config);\n    }\n})();\nconst DomObserver = {\n    executeOnNodeChanged,\n    addOnNodeChange,\n    removeOnNodeChange,\n    cleanup,\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DomObserver);\n\n\n//# sourceURL=webpack://Utility/./src/DomObserver.js?");

/***/ }),

/***/ "./src/ElementHelper.js":
/*!******************************!*\
  !*** ./src/ElementHelper.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _DomObserver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DomObserver */ \"./src/DomObserver.js\");\n// Author Knighttower\n// MIT License\n// Copyright (c) [2022] [Knighttower] https://github.com/knighttower\n\n\n\n/**\n * @class Adds some extra functionality to interact with a DOM element\n * @param {String|Object} selector Class or ID or DOM element\n * @param {String} scope The scope to search in, window, document, dom element. Defaults to document\n * @return {Object}\n * @example new ElementHelper('elementSelector')\n * @example new ElementHelper('elementSelector', domElement|window|document)\n *\n */\nclass ElementHelper {\n    /**\n     * Constructor\n     * @param {String|Object} selector\n     * @return {Object}\n     */\n    constructor(selector, scope = document) {\n        this.selector = selector;\n        if (typeof selector === 'object') {\n            this.domElement = selector;\n        } else if (String(selector).includes('//')) {\n            this.domElement = this.getElementByXpath(selector);\n        } else {\n            this.domElement = scope.querySelector(selector);\n        }\n    }\n\n    // =========================================\n    // --> Public\n    // --------------------------\n\n    /**\n     * Check if the element exists or is visible. It will keep querying\n     * @return {Boolean}\n     */\n    isInDom() {\n        return Boolean(this.domElement?.outerHTML);\n    }\n\n    /**\n     * Wait for element exists or is visible. It will keep querying\n     * @function whenInDom\n     * @return {Promise}\n     */\n    whenInDom() {\n        let $this = this;\n        let callbackId = Date.now() + Math.floor(Math.random() * 1000);\n\n        return new Promise(function (resolveThis) {\n            if (!$this.isInDom()) {\n                _DomObserver__WEBPACK_IMPORTED_MODULE_0__[\"default\"].addOnNodeChange(callbackId, () => {\n                    let element = new ElementHelper($this.selector);\n                    if (element.isInDom()) {\n                        $this = element;\n                        resolveThis($this);\n                        _DomObserver__WEBPACK_IMPORTED_MODULE_0__[\"default\"].removeOnNodeChange(callbackId);\n                    }\n                });\n            } else {\n                resolveThis($this);\n            }\n        });\n    }\n\n    /**\n     * Find element by Xpath string\n     * @param {String} xpath\n     * @example getElementByXpath(\"//html[1]/body[1]/div[1]\")\n     * @return {Object} DOM element\n     */\n    getElementByXpath(xpath) {\n        return document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;\n    }\n\n    /**\n     * Get the element xpath string\n     * @author Based on https://stackoverflow.com/questions/2631820/how-do-i-ensure-saved-click-coordinates-can-be-reload-to-the-same-place-even-if/2631931#2631931\n     * @return {String}\n     */\n    getXpathTo() {\n        let element = this.domElement;\n\n        if (element.id) {\n            return \"//*[@id='\" + element.id + \"']\";\n        }\n        if (element === document.body) {\n            return '//' + element.tagName;\n        }\n\n        let ix = 0;\n        let siblings = element.parentNode.childNodes;\n        for (let i = 0; i < siblings.length; i++) {\n            let sibling = siblings[i];\n            if (sibling === element) {\n                return (\n                    new ElementHelper(element.parentNode).getXpathTo() + '/' + element.tagName + '[' + (ix + 1) + ']'\n                );\n            }\n            if (sibling.nodeType === 1 && sibling.tagName === element.tagName) {\n                ix++;\n            }\n        }\n    }\n\n    /**\n     * Get the element attribute, but parse it if it is an object or array\n     * @param {String} attr Atrribute name\n     * @return {String|Array|Object|Null}\n     */\n    getAttribute(attr) {\n        return this.domElement.getAttribute(attr) || null;\n    }\n\n    /**\n     * Create a unique has for the element derived from its xpath\n     * @author Based on https://www.geeksforgeeks.org/how-to-create-hash-from-string-in-javascript/\n     * @return {String}\n     */\n    getHash() {\n        let string = String(this.getXpathTo());\n        let hash = 0;\n\n        if (string.length === 0) {\n            return hash;\n        }\n\n        for (let i = 0; i < string.length; i++) {\n            let char = string.charCodeAt(i);\n            hash = (hash << 5) - hash + char;\n            hash = hash & hash;\n        }\n\n        return hash;\n    }\n}\n\n/**\n * Future\n * @private\n * @todo enhance to extend the prototype like https://stackoverflow.com/questions/779880/in-javascript-can-you-extend-the-dom\n */\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ElementHelper);\n\n\n//# sourceURL=webpack://Utility/./src/ElementHelper.js?");

/***/ }),

/***/ "./src/ProxyHelper.js":
/*!****************************!*\
  !*** ./src/ProxyHelper.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ProxyHelper)\n/* harmony export */ });\n/* Author Knighttower\n    MIT License\n    [2023] [Knighttower] https://github.com/knighttower\n*/\n/**\n * @module ProxyHelper\n * Convert to proxy to protect objects\n * Allows to declare _private, _protected and _mutable - all arrays with prop names\n * @example ProxyHelper({objectProps..., _protected: array(...)})\n * @param {Object} object\n * @return {Proxy}\n * @usage const proxy = ProxyHelper({objectProps..., _protected: array(...), _private: array(...), _mutable: array(...)})\n * @usage _protected: array(...) -> Cannot be modified\n * @usage _private: array(...) -> Cannot be accessed\n * @usage _mutable: array(...) -> Can be modified\n */\nfunction ProxyHelper(object) {\n    'use strict';\n    const _private = new Map((object._private || ['_private']).map((prop) => [prop, true]));\n    const _protected = new Map([..._private, ...(object._protected || []).map((prop) => [prop, true])]);\n    const _mutable = new Map((object._mutable || []).map((prop) => [prop, true]));\n\n    return new Proxy(object, {\n        get(target, prop) {\n            if (prop in target && !_private.has(String(prop))) {\n                return target[prop];\n            } else {\n                console.error('Prop is private, not set, or object is protected', prop);\n                return undefined;\n            }\n        },\n        set(target, prop, value) {\n            prop = String(prop);\n            if (prop in target) {\n                if (_mutable.has(prop)) {\n                    target[prop] = value;\n                    return true;\n                }\n                if (!_protected.has(prop) && !_private.has(prop)) {\n                    target[prop] = value;\n                    return true;\n                } else {\n                    console.error('The prop is protected or private and cannot be modified', prop, value);\n                    return false;\n                }\n            } else {\n                console.error('Protected Object, cannot set new props', prop, value);\n                return false;\n            }\n        },\n    });\n}\n\n\n//# sourceURL=webpack://Utility/./src/ProxyHelper.js?");

/***/ }),

/***/ "./src/Utility.js":
/*!************************!*\
  !*** ./src/Utility.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Utility: () => (/* binding */ Utility),\n/* harmony export */   convertToBool: () => (/* binding */ convertToBool),\n/* harmony export */   convertToNumber: () => (/* binding */ convertToNumber),\n/* harmony export */   currencyToDecimal: () => (/* binding */ currencyToDecimal),\n/* harmony export */   dateFormat: () => (/* binding */ dateFormat),\n/* harmony export */   decimalToCurrency: () => (/* binding */ decimalToCurrency),\n/* harmony export */   \"default\": () => (/* binding */ Utility),\n/* harmony export */   emptyOrValue: () => (/* binding */ emptyOrValue),\n/* harmony export */   formatPhoneNumber: () => (/* binding */ formatPhoneNumber),\n/* harmony export */   getDynamicId: () => (/* binding */ getDynamicId),\n/* harmony export */   getGoogleMapsAddress: () => (/* binding */ getGoogleMapsAddress),\n/* harmony export */   getRandomId: () => (/* binding */ getRandomId),\n/* harmony export */   includes: () => (/* binding */ includes),\n/* harmony export */   instanceOf: () => (/* binding */ instanceOf),\n/* harmony export */   isEmpty: () => (/* binding */ isEmpty),\n/* harmony export */   isNumber: () => (/* binding */ isNumber),\n/* harmony export */   openGoogleMapsAddress: () => (/* binding */ openGoogleMapsAddress),\n/* harmony export */   proxyObject: () => (/* binding */ proxyObject),\n/* harmony export */   selectElement: () => (/* binding */ selectElement),\n/* harmony export */   toCurrency: () => (/* binding */ toCurrency),\n/* harmony export */   toDollarString: () => (/* binding */ toDollarString),\n/* harmony export */   typeOf: () => (/* binding */ typeOf),\n/* harmony export */   utility: () => (/* binding */ Utility),\n/* harmony export */   utils: () => (/* binding */ Utility),\n/* harmony export */   validateEmail: () => (/* binding */ validateEmail),\n/* harmony export */   validatePhone: () => (/* binding */ validatePhone)\n/* harmony export */ });\n/* harmony import */ var _ProxyHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ProxyHelper */ \"./src/ProxyHelper.js\");\n/* harmony import */ var _ElementHelper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ElementHelper */ \"./src/ElementHelper.js\");\n// // -----------------------------------------\n// /**\n//  * @knighttower\n//  * @url knighttower.io\n//  * @git https://github.com/knighttower/\n//  * @license MIT\n//  */\n// // -----------------------------------------\n\n// @see https://github.com/knighttower/JsObjectProxyHelper\n\n\n// @see https://github.com/knighttower/ElementHelper\n\n\n// -----------------------------\n// METHODS\n// -----------------------------\n\n/**\n * Convert a value to bool\n * @param {String|Boolean|Int|Number} val\n * @return {Boolean}\n * @usage convertToBool('true') // true\n * @usage convertToBool('false') // false\n * @usage convertToBool('0') // false\n * @usage convertToBool('1') // true\n * @usage convertToBool('') // false\n * @usage convertToBool('true') // true\n * @usage convertToBool('false') // false\n */\nfunction convertToBool(val) {\n    switch (typeof val) {\n        case 'boolean':\n            return val;\n        case 'string':\n            return val === 'false' || val === '0' ? false : true;\n        case 'number':\n            return val !== 0;\n        default:\n            return Boolean(val);\n    }\n}\n\n/**\n * Converts a given variable to a number if possible.\n * @param {string|number} input - The input variable to convert.\n * @returns {string|number} - The converted number or the original variable.\n * @example convertToNumber(123) // Output: 123 (number)\n * @example convertToNumber(123.45) // Output: 123.45 (number)\n * @example convertToNumber(\"123\") // Output: 123 (number)\n * @example convertToNumber(\"123.45\") // Output: 123.45 (number)\n * @example convertToNumber(\"abc\") // Output: \"abc\" (original string)\n * @example convertToNumber(\"123abc\") // Output: \"123abc\" (original string)\n * @example convertToNumber(null) // Output: null (original)\n */\nfunction convertToNumber(input) {\n    const isNum = isNumber(input);\n\n    if (isNum !== null) {\n        return isNum;\n    }\n    // Case: String that cannot be converted to a number\n    return input;\n}\n\n/**\n * Translate dollar amounts to decimal notation\n * @function currencyToDecimal\n * @memberof Utility\n * @param {String|Number} amount\n * @return number\n * @example currencyToDecimal('$123.45') // 123.45\n */\nfunction currencyToDecimal(amount) {\n    return Number(amount.replace(/[^0-9.-]+/g, ''));\n}\n\n/**\n * Format dates to standard US, with or w/out time\n * @function dateFormat\n * @memberof Utility\n * @param {String} dateTime Raw format 2201-01-01 16:15PM or unix or object\n * @param {Boolean} wTime If set, returns date with time as H:MM A\n * @return string\n * @example dateFormat('2201-01-01 16:15PM') // 01/01/2201\n * @example dateFormat('2201-01-01 16:15PM', true) // 01/01/2201 @ 4:15 PM\n * @example dateFormat('2201-01-01 16:15PM', false) // 01/01/2201\n * @example dateFormat('2201-01-01') // 01/01/2201\n */\nfunction dateFormat(dateTime, wTime) {\n    if (!dateTime || isNaN(new Date(dateTime).getTime())) {\n        return null;\n    }\n\n    const date = new Date(dateTime);\n\n    // Ensuring that the time zone is taken into account.\n    const optionsDate = { year: 'numeric', month: '2-digit', day: '2-digit', timeZone: 'UTC' };\n    const formattedDate = new Intl.DateTimeFormat('en-US', optionsDate).format(date);\n\n    if (wTime) {\n        const optionsTime = { hour: '2-digit', minute: '2-digit', hour12: true, timeZone: 'UTC' };\n        const formattedTime = new Intl.DateTimeFormat('en-US', optionsTime).format(date);\n        return `${formattedDate} @ ${formattedTime}`;\n    }\n\n    return formattedDate;\n}\n\n/**\n * Translate decimal notation to dollar amount\n * @function decimalToCurrency\n * @memberof Utility\n * @param {String|Number} amount\n * @return number\n * @example decimalToCurrency(123.45) // 123.45\n * @example decimalToCurrency(2123.46) // 2,123.46\n */\nfunction decimalToCurrency(amount) {\n    const formatConfig = {\n        minimumFractionDigits: 2,\n    };\n    return new Intl.NumberFormat('en-GB', formatConfig).format(amount);\n}\n\n/**\n * Check if there is a value, if not return null or the default value\n * It can test strings, arrays, objects, numbers, booleans\n * @function emptyOrValue\n * @memberof Utility\n * @param {String|Number} value If the value is not empty, returns it\n * @param {String|Number} _default The default value if empty\n * @return mixed\n * @example emptyOrValue('test', 'default') // 'test'\n * @example emptyOrValue('', 'default') // 'default'\n * @example emptyOrValue('test') // 'test'\n * @example emptyOrValue('') // null\n * @example emptyOrValue(0) // 0\n * @example var hello = ''; emptyOrValue(hello) // Null\n * @example var hello = 'test'; emptyOrValue(hello) // 'test'\n * @example var hello = 'test'; emptyOrValue(hello, 'default') // 'test'\n * @example var hello = ''; emptyOrValue(hello, 'default') // 'default'\n * @example var hello = []; emptyOrValue(hello, 'default') // null\n * @example var hello = {}; emptyOrValue(hello, 'default') // null\n * @example var hello = [...]; emptyOrValue(hello') // [...]\n */\nfunction emptyOrValue(value, _default = null) {\n    /**\n     * Test sequence:\n     * If it is a number 0> : true\n     * If is not undefined: true\n     * If it is boolean (true|false) prevents going to empty\n     * If it is not Empty, [], null, {}, 0, true, false: true\n     */\n\n    if (isNumber(value) !== null || typeof value === 'boolean') {\n        return value;\n    } else if (!isEmpty(value)) {\n        return value;\n    }\n\n    return _default;\n}\n\n/**\n * Format a phone number based on a given template.\n * @param {string} phoneNumber - The phone number to format.\n * @param {string} template - The template to use for formatting.\n * @returns {string} - The formatted phone number.\n * @example console.log(formatPhoneNumber('1234567890', '(000) 000-0000')); // Output: (123) 456-7890\n * @example console.log(formatPhoneNumber('1234567890', '000-000-0000')); // Output: 123-456-7890\n * @example console.log(formatPhoneNumber('123-456-7890', '(000) 000-0000')); // Output: (123) 456-7890\n * @example console.log(formatPhoneNumber('(123) 456-7890', '000-0000-0000')); // Output: 123-4567-890\n */\nfunction formatPhoneNumber(phoneNumber, template) {\n    // Remove all non-numeric characters from the phone number\n    const cleaned = phoneNumber.replace(/\\D/g, '');\n\n    // Verify the length of the cleaned phone number\n    if (cleaned.length !== 10) {\n        throw new Error('Invalid phone number length');\n    }\n\n    // Initialize an array to hold the formatted phone number\n    let formatted = [];\n\n    // Initialize a pointer for the cleaned phone number\n    let cleanedPointer = 0;\n\n    // Loop through the template and replace placeholders with actual numbers\n    for (let i = 0; i < template.length; i++) {\n        if (template[i] === '0') {\n            formatted.push(cleaned[cleanedPointer]);\n            cleanedPointer++;\n        } else {\n            formatted.push(template[i]);\n        }\n    }\n\n    return formatted.join('');\n}\n\n/**\n * Generate unique ids\n * @function getDynamicId\n * @memberof Utility\n * @return string Format kn__000000__000\n */\nfunction getDynamicId() {\n    return 'kn__' + new Date().getTime() + '__' + Math.floor(Math.random() * (999 - 100));\n}\n\n/**\n * Alias to getDynamicId\n * @function getRandomId\n * @memberof Utility\n * @return string\n * @example getRandomId() // kn__000000__000\n */\nconst getRandomId = getDynamicId;\n\n/**\n * Form a valid Google search address\n * @function getGoogleMapsAddress\n * @memberof Utility\n * @param {String|Object} address\n * @return string\n * @example getGoogleMapsAddress('New York') // 'https://maps.google.it/maps?q=New+York'\n * @example getGoogleMapsAddress({ address: 'New York', zip: '10001' }) // 'https://maps.google.it/maps?q=New+York+10001'\n * @example getGoogleMapsAddress({ address: 'New York', city: 'New York', state: 'NY' }) // 'https://maps.google.it/maps?q=New+York+New+York+NY'\n */\nfunction getGoogleMapsAddress(address) {\n    if (!address) return false;\n\n    let search = '';\n\n    if (typeOf(address, 'string')) {\n        search = address;\n    } else {\n        const keys = ['address', 'address1', 'city', 'state', 'zip', 'zipcode'];\n\n        search = keys.reduce((acc, key) => {\n            const value = Object.keys(address).find((aKey) => aKey.includes(key) && address[aKey]);\n            return value ? `${acc} ${address[value]}` : acc;\n        }, '');\n    }\n\n    search = search.trim().replace(/\\s+|,/g, '+');\n    return `https://maps.google.it/maps?q=${search}`;\n}\n\n/**\n * Check if a value is in a collection (array, string, object)\n * @param {collection} collection - The collection to search in\n * @param {value} value - The value to search for\n * @param {fromIndex} fromIndex - The index to start searching from\n * @return {boolean} - True if the value is in the collection, false otherwise\n */\nfunction includes(collection, value, fromIndex = 0) {\n    if (Array.isArray(collection) || typeof collection === 'string') {\n        // Use native includes for arrays and strings\n        return collection.includes(value, fromIndex);\n    }\n\n    if (typeof collection === 'object') {\n        // Search in object values\n        for (let key in collection) {\n            if (collection[key] === value) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\n/**\n * Check if a value is empty\n * @function isEmpty\n * @memberof Utility\n * @param {string|array|object|map|set|number|boolean} value\n * @url https://moderndash.io/\n * @return {string}\n */\nfunction isEmpty(value) {\n    if (value === null || value === undefined) return true;\n\n    if (typeof value === 'string' || Array.isArray(value)) return value.length === 0;\n\n    if (value instanceof Map || value instanceof Set) return value.size === 0;\n\n    if (ArrayBuffer.isView(value)) return value.byteLength === 0;\n\n    if (typeof value === 'object') return Object.keys(value).length === 0;\n\n    return false;\n}\n\n/**\n * Check if is a number or Int, if not return null\n * Integrates both Int and Number, or convert a string number to number to test\n * Note: this is not like Lodash isNumber since this one takes into consideration the 'string number'\n * @function isNumber\n * @memberof Utility\n * @param {String|Number} value\n * @return null|int\n * @example isNumber(123) // true\n * @example isNumber(123.45) // true\n * @example isNumber('123abc') // false\n * @example isNumber('abc') // false\n * @example isNumber('') // false\n * @example isNumber(\"123\") // true\n * @example isNumber(\"123.45\") // true\n */\nfunction isNumber(value) {\n    const isType = typeof value;\n    switch (value) {\n        case null:\n        case undefined:\n        case '':\n            return null;\n        case '0':\n        case 0:\n            return 0;\n        default:\n            if (isType === 'number' || isType === 'string') {\n                if (typeof value === 'number' || !Number.isNaN(Number(value))) {\n                    return +value;\n                }\n            }\n\n            break;\n    }\n\n    return null;\n}\n\n/**\n * Check the instance of a variable, and get the correct type for it. It also accepts simple comparisons\n * For more advance type checking see https://github.com/knighttower/JsTypeCheck\n * @param {any} input - The variable to check\n * @return {string|boolean} - The type of the variable or boolean when test is provided\n */\nfunction instanceOf(input, test) {\n    let inputType = 'unknown';\n    if (input === null) {\n        return inputType;\n    }\n    const instanceMapping = [\n        {\n            type: 'date',\n            inst: Date,\n        },\n        {\n            type: 'regexp',\n            inst: RegExp,\n        },\n        {\n            type: 'promise',\n            inst: Promise,\n        },\n        {\n            type: 'map',\n            inst: Map,\n        },\n        {\n            type: 'set',\n            inst: Set,\n        },\n        {\n            type: 'weakMap',\n            inst: WeakMap,\n        },\n        {\n            type: 'weakSet',\n            inst: WeakSet,\n        },\n    ];\n    let instTotal = instanceMapping.length;\n    while (instTotal--) {\n        if (input instanceof instanceMapping[instTotal].inst) {\n            inputType = instanceMapping[instTotal].type;\n            break;\n        }\n    }\n\n    if (test) {\n        return test === inputType;\n    }\n\n    return inputType;\n}\n\n/**\n * Open a Google Map using a provided address\n * @function openGoogleMapsAddress\n * @memberof Utility\n * @param {String|Object} object - Address information either as a string or as an object\n * @throws {Error} Throws an error if the address is invalid or if it's not a string or object.\n * @return {void}\n * @example openGoogleMapsAddress('New York'); // Opens Google Maps with the address 'New York'\n * @example openGoogleMapsAddress({ address: 'New York', zip: '10001' }); // Opens Google Maps with the address 'New York 10001'\n */\nfunction openGoogleMapsAddress(object) {\n    if (!typeOf(object, 'string') || !typeOf(object, 'object')) {\n        throw new Error('The input must be a string or an object.');\n    }\n\n    const address = getGoogleMapsAddress(object);\n\n    if (!isEmpty(address) || !typeOf(address, 'string')) {\n        throw new Error('The address you are trying to open is invalid.');\n    }\n\n    return window.open(address, '_blank');\n}\n\n/**\n * @example ProxyHelper({objectProps..., _protected: array(...)})\n * @param {Object} object\n * @return {Proxy}\n * @usage const proxy = ProxyHelper({objectProps..., _protected: array(...), _private: array(...), _mutable: array(...)})\n * @usage _protected: array(...) -> Cannot be modified\n * @usage _private: array(...) -> Cannot be accessed\n * @usage _mutable: array(...) -> Can be modified\n */\nfunction proxyObject(obj) {\n    return (0,_ProxyHelper__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(obj);\n}\n\n/**\n * Dom Element selector\n * @function selectElement\n * @param {String} selector - The selector to search for\n * @param {Object} scope - The scope to search in\n * @return {String} - The first element that matches the selector\n * @uses ElementHelper @knighttower/element-helper (https://github.com/knighttower/ElementHelper)\n * @example selectElement('#test') // <div id=\"test\"></div>\n */\nfunction selectElement(selector, scope = document) {\n    return new _ElementHelper__WEBPACK_IMPORTED_MODULE_1__[\"default\"](selector, scope);\n}\n\n/**\n * Alias to getDynamicId\n * @function toCurrency\n * @memberof Utility\n * @param {String|Number} amount\n * @return number\n * @example toCurrency(123.45) // 123.45\n * @example toCurrency(2123.46) // 2,123.46\n */\nfunction toCurrency(amount) {\n    return decimalToCurrency(amount);\n}\n\n/**\n * Covert to dollar string\n * @function toDollarString\n * @memberof Utility\n * @param {String|Number} amount\n * @return number\n * @example toDollarString(2,000) // 2K\n * @example toDollarString(2,000,000) // 2M\n * @example toDollarString(2,500,000) // 2.5M\n */\nfunction toDollarString(amount) {\n    if (typeOf(amount, 'string')) {\n        amount = currencyToDecimal(amount);\n    }\n\n    if (Math.abs(amount) > 999 && Math.abs(amount) < 999999) {\n        return Math.sign(amount) * (Math.abs(amount) / 1000).toFixed(1) + 'K';\n    }\n    if (Math.abs(amount) > 999999) {\n        return Math.sign(amount) * (Math.abs(amount) / 1000000).toFixed(1) + 'M';\n    }\n\n    return Math.sign(amount) * Math.abs(amount);\n}\n\n/**\n * Check the type of a variable, and get the correct type for it. It also accepts simple comparisons\n * For more advance type checking see https://github.com/knighttower/JsTypeCheck\n * @param {any} input - The variable to check\n * @param {string} test - The types to check against, piped string\n * @return {string|boolean} - The type of the variable\n * @example typeOf('hello', 'string') // returns true\n * @example typeOf('hello', 'number') // returns false\n * @example typeOf('hello', 'string') // returns true\n * @example typeOf('hello') // returns 'string'\n * @example typeOf({}) // returns 'object'\n */\nfunction typeOf(input, test) {\n    // Special case for null since it can be treated as an object\n    if (input === null) {\n        if (test) {\n            return test === null || test === 'null' ? true : false;\n        }\n        return 'null';\n    }\n\n    let inputType;\n\n    switch (typeof input) {\n        case 'number':\n        case 'string':\n        case 'boolean':\n        case 'undefined':\n        case 'bigint':\n        case 'symbol':\n        case 'function':\n            inputType = typeof input;\n            break;\n        case 'object':\n            inputType = Array.isArray(input) ? 'array' : 'object';\n\n            break;\n        default:\n            inputType = 'unknown';\n    }\n\n    if (test) {\n        return test === inputType;\n    }\n\n    return inputType;\n}\n\n/**\n * Validate emails\n * @function validateEmail\n * @memberof Utility\n * @param {String} email\n * @return Boolean\n * @example validateEmail('<EMAIL>') // false\n * @example validateEmail('test@test') // false\n * @example validateEmail('test@test.') // false\n * @example validateEmail('test@test.c') // false\n * @example validateEmail('test@test.com') // true\n */\nfunction validateEmail(email) {\n    var emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n    return emailRegex.test(email);\n}\n\n/**\n * Validate a phone number\n * @function validatePhone\n * @memberof Utility\n * @param {String} phone\n * @return void|Toast\n * @example validatePhone('1234567890') // true\n * @example validatePhone('(123) 456-7890') // true\n * @example validatePhone('123-456-7890') // true\n * @example validatePhone('123 456 7890') // false\n * @example validatePhone('123-4567-89') // false\n */\nfunction validatePhone(phone) {\n    var phoneRegex = /^\\(?(\\d{3})\\)?[- ]?(\\d{3})[- ]?(\\d{4})$/;\n    return phoneRegex.test(phone);\n}\n\n// export default Utility;\nconst Utility = {\n    convertToBool,\n    currencyToDecimal,\n    convertToNumber,\n    dateFormat,\n    decimalToCurrency,\n    emptyOrValue,\n    formatPhoneNumber,\n    getDynamicId,\n    getGoogleMapsAddress,\n    getRandomId,\n    includes,\n    isEmpty, // from https://moderndash.io/\n    isNumber,\n    instanceOf,\n    openGoogleMapsAddress,\n    proxyObject,\n    selectElement,\n    toCurrency,\n    toDollarString,\n    typeOf,\n    validateEmail,\n    validatePhone,\n};\n\n// Export ES6 modules\n\n\n\n//# sourceURL=webpack://Utility/./src/Utility.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/Utility.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});